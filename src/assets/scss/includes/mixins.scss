@mixin desktop {
    @media (min-width: #{$size-medium + 1px}) {
      @content;
    }
  }
  
  @mixin above-smallDesktop {
    @media (min-width: #{$size-small-desktop + 1}) {
      @content;
    }
  }
  
  @mixin smallDesktop {
    @media (max-width: #{$size-small-desktop}) {
      @content;
    }
  }
  
  @mixin above-tablet {
    @media (min-width: #{$size-medium + 1}) {
      @content;
    }
  }
  
  @mixin tablet {
    @media (max-width: #{$size-medium}) {
      @content;
    }
  }
  
  @mixin above-mobile {
    @media (min-width: #{$size-small + 1}) {
      @content;
    }
  }
  
  @mixin mobile {
    @media (max-width: #{$size-small}) {
      @content;
    }
  }
  
  @mixin align-items($value: stretch) {
      @if $value == flex-start {
          -webkit-box-align: start;
          -ms-flex-align: start;
      } @else if $value == flex-end {
          -webkit-box-align: end;
          -ms-flex-align: end;
      } @else {
          -webkit-box-align: $value;
          -ms-flex-align: $value;
      }
      -webkit-align-items: $value;
      -moz-align-items: $value;
      align-items: $value;
  }
  
  @mixin align-self($value: auto) {
      -webkit-align-self: $value;
      -moz-align-self: $value;
      @if $value == flex-start {
          -ms-flex-item-align: start;
      } @else if $value == flex-end {
          -ms-flex-item-align: end;
      } @else {
          -ms-flex-item-align: $value;
      }
      align-self: $value;
  }
  
  @mixin flexbox {
      display: -webkit-box;
      display: -webkit-flex;
      display: -moz-flex;
      display: -ms-flexbox;
      display: flex !important;
  }
  
  @mixin inline-flex {
      display: -webkit-inline-box;
      display: -webkit-inline-flex;
      display: -moz-inline-flex;
      display: -ms-inline-flexbox;
      display: inline-flex;
  }
  
  @mixin flex-grow($int: 0) {
      -webkit-box-flex: $int;
      -webkit-flex-grow: $int;
      -moz-flex-grow: $int;
      -ms-flex-positive: $int;
      flex-grow: $int;
  }
  
  @mixin flex-shrink($shrink) {
    -webkit-flex-shrink: $shrink;
    -moz-flex-shrink: $shrink;
    -ms-flex-shrink: $shrink;
    flex-shrink: $shrink;
  }
  
  @mixin flex-basis($value: auto) {
      -webkit-flex-basis: $value;
      -moz-flex-basis: $value;
      -ms-flex-preferred-size: $value;
      flex-basis: $value;
  }
  
  @mixin flex($fg: 1, $fs: null, $fb: null) {
      $fg-boxflex: $fg;
      @if type-of($fg) == 'list' {
          $fg-boxflex: nth($fg, 1);
      }
      -webkit-box-flex: $fg-boxflex;
      -webkit-flex: $fg $fs $fb;
      -moz-box-flex: $fg-boxflex;
      -moz-flex: $fg $fs $fb;
      -ms-flex: $fg $fs $fb;
      flex: $fg $fs $fb;
  }
  
  @mixin flex-direction($value: row) {
      @if $value == row-reverse {
          -webkit-box-direction: reverse;
          -webkit-box-orient: horizontal;
      } @else if $value == column {
          -webkit-box-direction: normal;
          -webkit-box-orient: vertical;
      } @else if $value == column-reverse {
          -webkit-box-direction: reverse;
          -webkit-box-orient: vertical;
      } @else {
          -webkit-box-direction: normal;
          -webkit-box-orient: horizontal;
      }
      -webkit-flex-direction: $value;
      -moz-flex-direction: $value;
      -ms-flex-direction: $value;
      flex-direction: $value;
  }
  
  @mixin flex-wrap($wrap) {
    -webkit-flex-wrap: $wrap;
       -moz-flex-wrap: $wrap;
        -ms-flex-wrap: $wrap;
            flex-wrap: $wrap;
  }
  
  @mixin justify-content($value: flex-start) {
      @if $value == flex-start {
          -webkit-box-pack: start;
          -ms-flex-pack: start;
      } @else if $value == flex-end {
          -webkit-box-pack: end;
          -ms-flex-pack: end;
      } @else if $value == space-between {
          -webkit-box-pack: justify;
          -ms-flex-pack: justify;
      } @else if $value == space-around {
          -ms-flex-pack: distribute;
      } @else {
          -webkit-box-pack: $value;
          -ms-flex-pack: $value;
      }
      -webkit-justify-content: $value;
      -moz-justify-content: $value;
      justify-content: $value;
  }
  
  @mixin order($int: 0) {
      -webkit-box-ordinal-group: $int + 1;
      -webkit-order: $int;
      -moz-order: $int;
      -ms-flex-order: $int;
      order: $int;
  }
  
  @mixin no-select {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }
  
  @mixin placeholder {
    &::-webkit-input-placeholder {@content}
    &:-moz-placeholder           {@content}
    &::-moz-placeholder          {@content}
    &:-ms-input-placeholder      {@content}
    &::placeholder              {@content}
  }
  
  @mixin position($position, $pos, $vals) {
    position: $position;
    @each $p in $pos {
      $i: index($pos, $p);
      #{$p}: nth($vals, $i);
    }
  }
  
  @mixin transform($args...) {
    -webkit-transform: $args;
    -moz-transform: $args;
    -ms-transform: $args;
    -o-transform: $args;
    transform: $args;
  }
  
  @mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
  }
  
  @mixin transform-origin($args...) {
    -webkit-transform-origin: $args;
    -moz-transform-origin: $args;
    -ms-transform-origin: $args;
    -o-transform-origin: $args;
    transform-origin: $args;
  }
  
  @mixin noscrollbar{
    -ms-overflow-style: none;
    &::-webkit-scrollbar {
        width: 0px;
        height: 0;
        padding: 0;
        display: none;
        margin: 0;
        border: none;
        background: transparent;
    }
  }
  